{"version":3,"sources":["serviceWorker.js","components/Navigation.jsx","components/NewTask.jsx","components/Task.jsx","components/EditTask.jsx","components/TasksList.jsx","components/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Navigation","_ref","title","react_default","a","createElement","className","Header","as","Input","icon","placeholder","NewTask","state","id","Math","random","text","date","dayOfTheWeek","setText","value","_this","setState","clearText","handleOnSubmit","localTask","Date","toLocaleDateString","getDay","isEdited","props","handleNewTask","_this2","this","Form","Divider","TextArea","onChange","textarea","target","Button","basic","color","onClick","Component","Task","_props$task","task","isComplete","Card","style","backgroundColor","Image","Content","Meta","Description","handleChangeTaskToEdit","handleCompletedTask","EditTask","handleEditTaskContent","TasksList","tasks","isCompleted","completedList","handleDeleteCompletedTasks","length","content","map","EditTask_EditTask","components_Task","key","App","completedTasks","prevState","concat","Object","toConsumableArray","taskId","console","log","filter","el","item","_this$state","components_Navigation","components_TasksList","components_NewTask","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e0b74393.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Button, Input, Header } from \"semantic-ui-react\";\r\nimport \"../styles/Navigation.scss\";\r\nimport \"../styles/Flexbox.scss\";\r\n\r\nconst Navigation = ({ title }) => (\r\n  <div className=\"Navigation display-flex  content-center padding-top-10 padding-bottom-10 \">\r\n    <div className=\"container display-flex  space-between items-center\">\r\n      <Header as=\"h3\" className=\"title\">{title}</Header>\r\n      <Input icon='search' placeholder='Search...' />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Navigation;\r\n","import React, { Component } from 'react';\r\nimport { Form, TextArea, Header, Button, Divider } from 'semantic-ui-react';\r\n\r\nclass NewTask extends Component {\r\n  state = {\r\n    id: Math.random() * 1000000,\r\n    text: '',\r\n    date: '',\r\n    dayOfTheWeek: ''\r\n  };\r\n\r\n  setText = value => {\r\n    this.setState({\r\n      text: value\r\n    });\r\n  };\r\n\r\n  clearText = () => {\r\n    this.setState({ text: '' });\r\n  };\r\n\r\n  handleOnSubmit = () => {\r\n    let localTask = this.state;\r\n    localTask.date = new Date().toLocaleDateString();\r\n    localTask.dayOfTheWeek = new Date().getDay();\r\n    localTask.isEdited = false;\r\n\r\n    this.props.handleNewTask(localTask);\r\n    this.clearText();\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    const { title } = this.props;\r\n    return (\r\n      <Form className=\"padding-top-20\">\r\n        <Header as=\"h3\" className=\"margin-top-10\">\r\n          {title}\r\n        </Header>\r\n        <Divider />\r\n        <TextArea\r\n          onChange={textarea => this.setText(textarea.target.value)}\r\n          value={text}\r\n          placeholder=\"Enter something interesting\"\r\n        />\r\n        <div className=\"display-flex flex-end margin-top-10\">\r\n          <Button basic color=\"red\" onClick={this.clearText}>\r\n            Clear\r\n          </Button>\r\n          <Button basic color=\"green\" onClick={this.handleOnSubmit}>\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTask;\r\n","import React from 'react';\r\nimport { Card, Image, Header, Button } from 'semantic-ui-react';\r\n\r\nconst Task = props => {\r\n  const { id, text, date, dayOfTheWeek, isComplete } = props.task;\r\n  let days = [\r\n    'Sunday',\r\n    'Monday',\r\n    'Tuesday',\r\n    'Wednesday',\r\n    'Thursday',\r\n    'Friday',\r\n    'Saturday'\r\n  ];\r\n\r\n  return (\r\n    <Card\r\n      className=\"full-width\"\r\n      style={{\r\n        backgroundColor: isComplete ? '#b7fbff' : 'white'\r\n      }}\r\n    >\r\n      <Image />\r\n      <Card.Content>\r\n        <div className=\"display-flex space-between\">\r\n          <Header as=\"h5\">{days[dayOfTheWeek]}</Header>\r\n          <Card.Meta>\r\n            <span className=\"date\">{date}</span>\r\n          </Card.Meta>\r\n        </div>\r\n\r\n        <Card.Description>{text}</Card.Description>\r\n        {isComplete ? null : (\r\n          <div className=\"display-flex space-between margin-top-10\">\r\n            <Button\r\n              basic\r\n              color=\"blue\"\r\n              onClick={() => props.handleChangeTaskToEdit(id)}\r\n            >\r\n              Modify\r\n            </Button>\r\n            <Button\r\n              basic\r\n              color=\"green\"\r\n              onClick={() => props.handleCompletedTask(id)}\r\n            >\r\n              Done\r\n            </Button>\r\n          </div>\r\n        )}\r\n      </Card.Content>\r\n    </Card>\r\n  );\r\n};\r\n\r\nexport default Task;\r\n","import React, { Component } from 'react';\r\nimport { Header, Divider, TextArea, Button, Form } from 'semantic-ui-react';\r\n\r\nexport default class EditTask extends Component {\r\n  state = {\r\n    ...this.props.task\r\n  };\r\n\r\n  setText = value => {\r\n    this.setState({\r\n      text: value\r\n    });\r\n  };\r\n\r\n  clearText = () => {\r\n    this.setState({ text: '' });\r\n  };\r\n\r\n  handleOnSubmit = () => {\r\n    let localTask = this.state;\r\n\r\n    localTask.date = new Date().toLocaleDateString();\r\n    localTask.dayOfTheWeek = new Date().getDay();\r\n    localTask.isEdited = false;\r\n\r\n    this.props.handleEditTaskContent(localTask);\r\n    this.clearText();\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    const { title } = this.props;\r\n    return (\r\n      <Form className=\"padding-top-20\">\r\n        <Header as=\"h3\" className=\"margin-top-10\">\r\n          {title}\r\n        </Header>\r\n        <Divider />\r\n        <TextArea\r\n          onChange={textarea => this.setText(textarea.target.value)}\r\n          value={text}\r\n          placeholder=\"Enter something interesting\"\r\n        />\r\n        <div className=\"display-flex flex-end margin-top-10\">\r\n          <Button basic color=\"red\" onClick={this.clearText}>\r\n            Clear\r\n          </Button>\r\n          <Button basic color=\"green\" onClick={this.handleOnSubmit}>\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n","import React from 'react';\r\nimport Task from './Task';\r\nimport { Header, Button } from 'semantic-ui-react';\r\nimport NewTask from './NewTask';\r\nimport EditTask from \"./EditTask\";\r\n\r\nconst TasksList = ({\r\n  title,\r\n  tasks,\r\n  isCompleted,\r\n  handleCompletedTask,\r\n  completedList,\r\n  handleDeleteCompletedTasks,\r\n  handleChangeTaskToEdit,\r\n  handleEditTaskContent\r\n}) => {\r\n  if (tasks.length > 0) {\r\n    return (\r\n      <div className=\"margin-top-20\">\r\n        <div className=\"display-flex space-between\">\r\n          <Header as=\"h3\">{title}</Header>\r\n          {completedList ? (\r\n            <Button\r\n              basic\r\n              color=\"red\"\r\n              content=\"Delete completed tasks\"\r\n              onClick={handleDeleteCompletedTasks}\r\n            />\r\n          ) : null}\r\n        </div>\r\n        {tasks.map(task => {\r\n          if (!task.isEdited) {\r\n            return (\r\n              <Task\r\n                style={{\r\n                  backgroundColor: isCompleted ? '#93FF96' : 'white'\r\n                }}\r\n                key={task.id}\r\n                task={task}\r\n                handleCompletedTask={handleCompletedTask}\r\n                handleChangeTaskToEdit={handleChangeTaskToEdit}\r\n              />\r\n            );\r\n          } else {\r\n            return (\r\n              <EditTask\r\n                task={task}\r\n                title={'Change task'}\r\n                handleEditTaskContent={handleEditTaskContent}\r\n              />\r\n            );\r\n          }\r\n        })}\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default TasksList;\r\n","import React, { Component } from \"react\";\r\nimport \"../styles/App.scss\";\r\nimport Navigation from \"./Navigation\";\r\nimport NewTask from \"./NewTask\";\r\nimport TasksList from \"./TasksList\";\r\nimport { Divider } from \"semantic-ui-react\";\r\n\r\nclass App extends Component {\r\n  state = {\r\n    title: \"todone\",\r\n    tasks: [\r\n      {\r\n        id: 2,\r\n        text: \"Azi merge 2\",\r\n        date: new Date().toLocaleDateString(),\r\n        dayOfTheWeek: new Date().getDay(),\r\n        isComplete: false,\r\n        isEdited: false\r\n      },\r\n      {\r\n        id: 3,\r\n        text: \"Azi merge 3\",\r\n        date: new Date().toLocaleDateString(),\r\n        dayOfTheWeek: new Date().getDay(),\r\n        isComplete: false,\r\n        isEdited: false\r\n      },\r\n      {\r\n        id: 4,\r\n        text: \"Azi merge 2\",\r\n        date: new Date().toLocaleDateString(),\r\n        dayOfTheWeek: new Date().getDay(),\r\n        isComplete: false,\r\n        isEdited: false\r\n      }\r\n    ],\r\n    completedTasks: [\r\n      {\r\n        id: 1,\r\n        text: \"Azi merge\",\r\n        date: new Date().toLocaleDateString(),\r\n        dayOfTheWeek: new Date().getDay(),\r\n        isComplete: true,\r\n        isEdited: false\r\n      }\r\n    ]\r\n  };\r\n\r\n  handleNewTask = task => {\r\n    this.setState((prevState, props) => ({\r\n      tasks: [...prevState.tasks, task]\r\n    }));\r\n  };\r\n\r\n  handleCompletedTask = taskId => {\r\n    console.log(this.state.tasks.filter(el => el.id !== taskId));\r\n    this.state.tasks.filter(el => el.id === taskId)[0].isComplete = true;\r\n    this.setState((prevState, props) => ({\r\n      completedTasks: [\r\n        ...prevState.completedTasks,\r\n        prevState.tasks.filter(el => el.id === taskId)[0]\r\n      ],\r\n      tasks: prevState.tasks.filter(el => el.id !== taskId)\r\n    }));\r\n  };\r\n\r\n  handleDeleteCompletedTasks = () => {\r\n    this.setState({\r\n      completedTasks: []\r\n    });\r\n  };\r\n\r\n  handleChangeTaskToEdit = (taskId) => {\r\n    const { tasks } = this.state;\r\n    tasks.filter(el => el.id === taskId)[0].isEdited = true;\r\n    this.setState((prevState, props) => ({\r\n      tasks: tasks\r\n    }));\r\n  }\r\n\r\n  handleEditTaskContent = (task) => {\r\n    debugger\r\n    const { tasks } = this.state;\r\n    let item = tasks.filter(el => el.id === task.id)[0]\r\n    item.isEdited = false;\r\n    item.text = task.text;\r\n    this.setState((prevState, props) => ({\r\n      tasks: tasks\r\n    }));\r\n  }\r\n\r\n  render() {\r\n    const { title, tasks, completedTasks } = this.state;\r\n    return (\r\n      <div className=\"\">\r\n        <Navigation title={title} />\r\n        <div className=\"container margin-left-auto margin-right-auto\">\r\n          <TasksList\r\n            handleCompletedTask={this.handleCompletedTask}\r\n            completedList={false}\r\n            handleChangeTaskToEdit={this.handleChangeTaskToEdit}\r\n            handleEditTaskContent={this.handleEditTaskContent}\r\n            title=\"Active Tasks\"\r\n            tasks={tasks}\r\n          />\r\n          <TasksList\r\n            handleDeleteCompletedTasks={this.handleDeleteCompletedTasks}\r\n            handleCompletedTask={this.handleCompletedTask}\r\n            completedList={true}\r\n            title=\"Completed Tasks\"\r\n            tasks={completedTasks}\r\n          />\r\n          <NewTask title={\"New task\"} handleNewTask={this.handleNewTask} />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport \"./styles/index.scss\";\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from './components/App';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}