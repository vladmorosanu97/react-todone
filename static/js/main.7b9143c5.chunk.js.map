{"version":3,"sources":["serviceWorker.js","components/Navigation.jsx","components/NewTask.jsx","components/Task.jsx","components/TasksList.jsx","components/App.jsx","index.js"],"names":["Boolean","window","location","hostname","match","Navigation","_ref","title","react_default","a","createElement","className","Header","as","Input","icon","placeholder","NewTask","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","setText","value","setState","text","clearText","setDateTime","state","date","Date","toLocaleDateString","dayOfTheWeek","getDay","isEdited","handleOnSubmit","handleNewTask","undefined","task","objectSpread","id","Math","random","_this2","Form","Divider","TextArea","onChange","textarea","target","Button","basic","color","onClick","Component","Task","_this$state","isComplete","Card","style","backgroundColor","Image","Content","Meta","Description","handleEditTask","handleCompletedTask","TasksList","tasks","isCompleted","completedList","handleDeleteCompleteTasks","length","content","map","components_NewTask","components_Task","key","App","completedTasks","prevState","concat","toConsumableArray","taskId","console","log","filter","el","components_Navigation","components_TasksList","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7b9143c5.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\r\nimport { Button, Input, Header } from \"semantic-ui-react\";\r\nimport \"../styles/Navigation.scss\";\r\nimport \"../styles/Flexbox.scss\";\r\n\r\nconst Navigation = ({ title }) => (\r\n  <div className=\"Navigation display-flex  content-center padding-top-10 padding-bottom-10 \">\r\n    <div className=\"container display-flex  space-between items-center\">\r\n      <Header as=\"h3\" className=\"title\">{title}</Header>\r\n      <Input icon='search' placeholder='Search...' />\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Navigation;\r\n","import React, { Component } from \"react\";\r\nimport { Form, TextArea, Header, Button, Divider } from \"semantic-ui-react\";\r\n\r\nclass NewTask extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    if (props.task !== undefined) {\r\n      this.state = {\r\n        ...props.task\r\n      };\r\n    } else {\r\n      this.state = {\r\n        id: Math.random() * 1000000,\r\n        text: \"\",\r\n        date: \"\",\r\n        dayOfTheWeek: \"\"\r\n      };\r\n    }\r\n  }\r\n\r\n  setText = value => {\r\n    this.setState({\r\n      text: value\r\n    });\r\n  };\r\n\r\n  clearText = () => {\r\n    this.setState({ text: \"\" });\r\n  };\r\n\r\n  setDateTime = () => {\r\n    // eslint-disable-next-line react/no-direct-mutation-state\r\n    this.state.date = new Date().toLocaleDateString();\r\n    // eslint-disable-next-line react/no-direct-mutation-state\r\n    this.state.dayOfTheWeek = new Date().getDay(); // only to update state, not rendering\r\n    // eslint-disable-next-line react/no-direct-mutation-state\r\n    this.state.isEdited = false;\r\n  };\r\n\r\n  handleOnSubmit = () => {\r\n    this.setDateTime();\r\n\r\n    this.props.handleNewTask(this.state);\r\n    this.clearText();\r\n  };\r\n\r\n  render() {\r\n    const { text } = this.state;\r\n    return (\r\n      <Form className=\"padding-top-20\">\r\n        <Header as=\"h3\" className=\"margin-top-10\">\r\n          {this.props.title}\r\n        </Header>\r\n        <Divider />\r\n        <TextArea\r\n          onChange={textarea => this.setText(textarea.target.value)}\r\n          value={text}\r\n          placeholder=\"Enter something interesting\"\r\n        />\r\n        <div className=\"display-flex flex-end margin-top-10\">\r\n          <Button basic color=\"red\" onClick={this.clearText}>\r\n            Clear\r\n          </Button>\r\n          <Button basic color=\"green\" onClick={this.handleOnSubmit}>\r\n            Save\r\n          </Button>\r\n        </div>\r\n      </Form>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NewTask;\r\n","import React, { Component } from \"react\";\r\nimport { Card, Icon, Image, Header, Button } from \"semantic-ui-react\";\r\nclass Task extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      ...props.task\r\n    };\r\n  }\r\n\r\n  render() {\r\n    const { id, text, date, dayOfTheWeek, isComplete } = this.state;\r\n    let days = [\r\n      \"Sunday\",\r\n      \"Monday\",\r\n      \"Tuesday\",\r\n      \"Wednesday\",\r\n      \"Thursday\",\r\n      \"Friday\",\r\n      \"Saturday\"\r\n    ];\r\n\r\n    return (\r\n      <Card\r\n        className=\"full-width\"\r\n        style={{\r\n          backgroundColor: isComplete ? \"#b7fbff\" : \"white\"\r\n        }}\r\n      >\r\n        <Image />\r\n        <Card.Content>\r\n          <div className=\"display-flex space-between\">\r\n            <Header as=\"h5\">{days[dayOfTheWeek]}</Header>\r\n            <Card.Meta>\r\n              <span className=\"date\">{date}</span>\r\n            </Card.Meta>\r\n          </div>\r\n\r\n          <Card.Description>{text}</Card.Description>\r\n          {isComplete ? (\r\n            null\r\n          ) : (\r\n            <div className=\"display-flex space-between margin-top-10\">\r\n              <Button basic color=\"blue\" onClick={() => this.props.handleEditTask(id)}>\r\n                Modify\r\n              </Button>\r\n              <Button basic color=\"green\" onClick={() => this.props.handleCompletedTask(id)}>\r\n                Done\r\n              </Button>\r\n            </div>\r\n          )}\r\n        </Card.Content>\r\n      </Card>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Task;\r\n","import React from \"react\";\r\nimport Task from \"./Task\";\r\nimport { Header, Button } from \"semantic-ui-react\";\r\nimport NewTask from \"./NewTask\";\r\n\r\nconst TasksList = ({\r\n  title,\r\n  tasks,\r\n  isCompleted,\r\n  handleCompletedTask,\r\n  completedList,\r\n  handleDeleteCompleteTasks,\r\n  handleEditTask,\r\n  handleNewTask\r\n}) => {\r\n  if (tasks.length > 0) {\r\n    return (\r\n      <div className=\"margin-top-20\">\r\n        <div className=\"display-flex space-between\">\r\n          <Header as=\"h3\">{title}</Header>\r\n          {completedList ? (\r\n            <Button\r\n              basic\r\n              color=\"red\"\r\n              content=\"Delete completed tasks\"\r\n              onClick={handleDeleteCompleteTasks}\r\n            />\r\n          ) : null}\r\n        </div>\r\n        {tasks.map(task => {\r\n          if (!task.isEdited) {\r\n            return (\r\n              <Task\r\n                style={{\r\n                  backgroundColor: isCompleted ? \"#93FF96\" : \"white\"\r\n                }}\r\n                key={task.id}\r\n                task={task}\r\n                handleCompletedTask={handleCompletedTask}\r\n                handleEditTask={handleEditTask}\r\n              />\r\n            );\r\n          } else {\r\n            return <NewTask task={task} title={\"Change task\"} handleNewTask={handleNewTask} />;\r\n          }\r\n        })}\r\n      </div>\r\n    );\r\n  } else {\r\n    return null;\r\n  }\r\n};\r\n\r\nexport default TasksList;\r\n","import React, { Component } from \"react\";\nimport \"../styles/App.scss\";\nimport Navigation from \"./Navigation\";\nimport NewTask from \"./NewTask\";\nimport TasksList from \"./TasksList\";\nimport { Divider } from \"semantic-ui-react\";\n\nclass App extends Component {\n  state = {\n    title: \"todone\",\n    tasks: [\n      {\n        id: 2,\n        text: \"Azi merge 2\",\n        date: new Date().toLocaleDateString(),\n        dayOfTheWeek: new Date().getDay(),\n        isComplete: false,\n        isEdited: false\n      },\n      {\n        id: 3,\n        text: \"Azi merge 3\",\n        date: new Date().toLocaleDateString(),\n        dayOfTheWeek: new Date().getDay(),\n        isComplete: false,\n        isEdited: false\n      },\n      {\n        id: 4,\n        text: \"Azi merge 2\",\n        date: new Date().toLocaleDateString(),\n        dayOfTheWeek: new Date().getDay(),\n        isComplete: false,\n        isEdited: false\n      }\n    ],\n    completedTasks: [\n      {\n        id: 1,\n        text: \"Azi merge\",\n        date: new Date().toLocaleDateString(),\n        dayOfTheWeek: new Date().getDay(),\n        isComplete: true,\n        isEdited: false\n      }\n    ]\n  };\n\n  handleNewTask = task => {\n    this.setState((prevState, props) => ({\n      tasks: [...prevState.tasks, task]\n    }));\n  };\n\n  handleCompletedTask = taskId => {\n    console.log(this.state.tasks.filter(el => el.id !== taskId));\n    this.state.tasks.filter(el => el.id === taskId)[0].isComplete = true;\n    this.setState((prevState, props) => ({\n      completedTasks: [\n        ...prevState.completedTasks,\n        prevState.tasks.filter(el => el.id === taskId)[0]\n      ],\n      tasks: prevState.tasks.filter(el => el.id !== taskId)\n    }));\n  };\n\n  handleDeleteCompleteTasks = () => {\n    this.setState({\n      completedTasks: []\n    });\n  };\n\n  handleEditTask = (taskId) => {\n    debugger\n    const { tasks } = this.state;\n    tasks.filter(el => el.id === taskId)[0].isEdited = true;\n    this.setState((prevState, props) => ({\n      tasks: tasks\n    }));\n  }\n\n  render() {\n    const { title, tasks, completedTasks } = this.state;\n    return (\n      <div className=\"\">\n        <Navigation title={title} />\n        <div className=\"container margin-left-auto margin-right-auto\">\n          <TasksList\n            handleCompletedTask={this.handleCompletedTask}\n            completedList={false}\n            handleEditTask={this.handleEditTask}\n            title=\"Active Tasks\"\n            tasks={tasks}\n            handleNewTask={this.handleNewTask}\n          />\n          <TasksList\n            handleDeleteCompleteTasks={this.handleDeleteCompleteTasks}\n            handleCompletedTask={this.handleCompletedTask}\n            completedList={true}\n            handleNewTask={this.handleNewTask}\n            title=\"Completed Tasks\"\n            tasks={completedTasks}\n          />\n          <NewTask title={\"New task\"} handleNewTask={this.handleNewTask} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport \"./styles/index.scss\";\nimport * as serviceWorker from './serviceWorker';\nimport App from './components/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}